const {Command, flags} = require('@oclif/command');
var fs = require('fs');
var config = require('../lib/config');
var client = require('../lib/client');
const ctable = require('console.table');
var firebase = require('firebase');
var storage = require('@firebase/storage');
global.XMLHttpRequest = require('xhr2');
const path = require('path');

class UploadCommand extends Command {
    async run() {
        var api_key = null;
        const {flags} = this.parse(UploadCommand)
        if (flags.app == null) {
            console.log("app is null");
            return;
        }
        if (flags.file == null) {
            console.log("Specify location of app to be uploaded");
            return;
        }
        config().then(function(config) { 
            api_key = config['api_key'];
            var storageRef = config['firebase_app'].storage().ref();
            var file = fs.readFileSync(flags.file);
            var filename = path.basename(flags.file)
            var ext = path.extname(filename)
            filename = filename.split('.')[0] + Date.now() + ext
            if (ext == '.apk') {
                console.log("Android app detected");
                var metadata = {contentType: 'application/vnd.android.package-archive'};
            } else {
                var metadata = {contentType: 'application/octet-stream'};
            }
            var uploadTask = storageRef.child('files/' + api_key + '/' + filename).put(file, metadata);

            uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED,
                function(snapshot) {
                    // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded
                    var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                    process.stdout.write(parseInt(progress) + '% uploaded \r');
                    switch (snapshot.state) {
                        case firebase.storage.TaskState.PAUSED:
                        console.log('Upload is paused');
                        break;
                    }
                }, function (err) {
                    switch (err.code) {
                        case 'storage/unauthorized':
                        console.log("User doesn't have permission to access the object")
                        break;

                        case 'storage/canceled':
                        console.log("User canceled the upload")
                        break;

                        case 'storage/unknown':
                        console.log('Unknown error occurred, inspect error.serverResponse');
                        break;
                    }
                }, function() {
                    console.log("");
                    uploadTask.snapshot.ref.getDownloadURL().then(function(app_url) {
                        var params = {
                            app_path: app_url,
                            app_url: app_url,
                        }
                        return client.post('apps/'+ flags.app +'/version', params, {
                            headers: {'X-API-KEY': api_key},
                        });
                    }).then(function (response) {
                        var table_data = [];
                        var app = response.data;
                        table_data.push({
                            'app_type': app.app_type,
                            'app_id': app.app_id,
                            'version': app.label,
                        });
                        
                        const table = ctable.getTable(table_data);
                        console.log(table);
                        process.exit(); 
                    }).catch(function(err) {
                        console.log("Upload failed");
                        console.log(err.message);
                        process.exit();
                    });
            });
        }).catch(function(err) {
            console.log(err.message);
            process.exit();
        }, function (err) {
            console.log(err.message);
            process.exit();
        });
      }
  }
  
  UploadCommand.description = `Upload App`
  
  UploadCommand.flags = {
    app: flags.string({char: 'a', description: 'app id'}),
    file: flags.string({char: 'f', description: 'location of app'}),
  }
  
  module.exports = UploadCommand
  